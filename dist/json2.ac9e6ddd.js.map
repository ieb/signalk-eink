{"version":3,"sources":["../libs/json2.js"],"names":["JSON","rx_one","rx_two","rx_three","rx_four","rx_escapable","rx_dangerous","gap","indent","meta","rep","f","n","this_value","valueOf","quote","string","lastIndex","test","replace","a","c","charCodeAt","toString","slice","str","key","holder","i","k","v","length","partial","mind","value","toJSON","call","isFinite","String","Object","prototype","apply","join","push","hasOwnProperty","Date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","Boolean","Number","stringify","replacer","space","Error","parse","text","reviver","j","walk","undefined","eval","SyntaxError"],"mappings":";AAgKA,SAAA,QAAA,GAAA,OAAA,QAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAJoB,YAATA,oBAAAA,KAAAA,YAAAA,QAAAA,SACPA,KAAO,IAGV,WACG,aAEIC,IAAAA,OAAS,gBACTC,OAAS,sCACTC,SAAW,mEACXC,QAAU,uBACVC,aAAe,kIACfC,aAAe,2GAwCfC,IACAC,OACAC,KACAC,IAzCKC,SAAAA,EAAEC,GAECA,OAAAA,EAAI,GACN,IAAMA,EACNA,EAGDC,SAAAA,aACE,OAAA,KAAKC,UAoCPC,SAAAA,MAAMC,GAQJX,OADPA,aAAaY,UAAY,EAClBZ,aAAaa,KAAKF,GACnB,IAAOA,EAAOG,QAAQd,aAAc,SAAUe,GACxCC,IAAAA,EAAIZ,KAAKW,GACN,MAAa,iBAANC,EACRA,EACA,OAAS,OAASD,EAAEE,WAAW,GAAGC,SAAS,KAAKC,OAAO,KAC5D,IACH,IAAOR,EAAS,IAIjBS,SAAAA,IAAIC,EAAKC,GAIVC,IAAAA,EACAC,EACAC,EACAC,EAEAC,EADAC,EAAO1B,IAEP2B,EAAQP,EAAOD,GAqBJQ,OAhBXA,GACoB,WAAjB,QAAOA,IACiB,mBAAjBA,EAAMC,SAEhBD,EAAQA,EAAMC,OAAOT,IAMN,mBAARhB,MACPwB,EAAQxB,IAAI0B,KAAKT,EAAQD,EAAKQ,IAKnBA,QAAAA,IACV,IAAA,SACMnB,OAAAA,MAAMmB,GAEZ,IAAA,SAIOG,OAAAA,SAASH,GACXI,OAAOJ,GACP,OAEL,IAAA,UACA,IAAA,OAMMI,OAAAA,OAAOJ,GAKb,IAAA,SAKG,IAACA,EACM,MAAA,OAUPK,GALJhC,KAAOC,OACPwB,EAAU,GAIqC,mBAA3CO,OAAOC,UAAUjB,SAASkB,MAAMP,GAA6B,CAMxDN,IADLG,EAASG,EAAMH,OACVH,EAAI,EAAGA,EAAIG,EAAQH,GAAK,EACzBI,EAAQJ,GAAKH,IAAIG,EAAGM,IAAU,OAmB3BJ,OAbPA,EAAuB,IAAnBE,EAAQD,OACN,KACAxB,IAEM,MACEA,IACAyB,EAAQU,KAAK,MAAQnC,KACrB,KACA0B,EACA,IAEJ,IAAMD,EAAQU,KAAK,KAAO,IACpCnC,IAAM0B,EACCH,EAKPpB,GAAAA,KAAsB,WAAf,QAAOA,KAETkB,IADLG,EAASrB,IAAIqB,OACRH,EAAI,EAAGA,EAAIG,EAAQH,GAAK,EACH,iBAAXlB,IAAIkB,KAEXE,EAAIL,IADJI,EAAInB,IAAIkB,GACGM,KAEPF,EAAQW,KAAK5B,MAAMc,IACdtB,IACK,KACA,KACNuB,QAQXD,IAAAA,KAAKK,EACFK,OAAOC,UAAUI,eAAeR,KAAKF,EAAOL,KAC5CC,EAAIL,IAAII,EAAGK,KAEPF,EAAQW,KAAK5B,MAAMc,IACdtB,IACK,KACA,KACNuB,GAebA,OANPA,EAAuB,IAAnBE,EAAQD,OACN,KACAxB,IACI,MAAQA,IAAMyB,EAAQU,KAAK,MAAQnC,KAAO,KAAO0B,EAAO,IACxD,IAAMD,EAAQU,KAAK,KAAO,IACpCnC,IAAM0B,EACCH,GApMsB,mBAA1Be,KAAKL,UAAUL,SAEtBU,KAAKL,UAAUL,OAAS,WAEbE,OAAAA,SAAS,KAAKvB,WAEb,KAAKgC,iBACH,IACAnC,EAAE,KAAKoC,cAAgB,GACvB,IACApC,EAAE,KAAKqC,cACP,IACArC,EAAE,KAAKsC,eACP,IACAtC,EAAE,KAAKuC,iBACP,IACAvC,EAAE,KAAKwC,iBACP,IAEJ,MAGVC,QAAQZ,UAAUL,OAAStB,WAC3BwC,OAAOb,UAAUL,OAAStB,WAC1ByB,OAAOE,UAAUL,OAAStB,YAkLA,mBAAnBb,KAAKsD,YACZ7C,KAAO,CACG,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,KAAA,MACA,IAAA,MACA,KAAA,QAEVT,KAAKsD,UAAY,SAAUpB,EAAOqB,EAAUC,GAQpC5B,IAAAA,EAOA,GANJrB,IAAM,GACNC,OAAS,GAKY,iBAAVgD,EACF5B,IAAAA,EAAI,EAAGA,EAAI4B,EAAO5B,GAAK,EACxBpB,QAAU,QAKU,iBAAVgD,IACdhD,OAASgD,GAOTD,GADJ7C,IAAM6C,EACFA,GAAgC,mBAAbA,IACC,WAApB,QAAOA,IACuB,iBAApBA,EAASxB,QAEb,MAAA,IAAI0B,MAAM,kBAMbhC,OAAAA,IAAI,GAAI,CAAKS,GAAAA,MAOF,mBAAflC,KAAK0D,QACZ1D,KAAK0D,MAAQ,SAAUC,KAAMC,SAKrBC,IAAAA,EAEKC,SAAAA,KAAKnC,EAAQD,GAKdG,IAAAA,EACAC,EACAI,EAAQP,EAAOD,GACfQ,GAAAA,GAA0B,WAAjB,QAAOA,GACXL,IAAAA,KAAKK,EACFK,OAAOC,UAAUI,eAAeR,KAAKF,EAAOL,UAElCkC,KADVjC,EAAIgC,KAAK5B,EAAOL,IAEZK,EAAML,GAAKC,SAEJI,EAAML,IAKtB+B,OAAAA,QAAQxB,KAAKT,EAAQD,EAAKQ,GAiCjCjC,GAzBJ0D,KAAOrB,OAAOqB,MACdrD,aAAaW,UAAY,EACrBX,aAAaY,KAAKyC,QAClBA,KAAOA,KAAKxC,QAAQb,aAAc,SAAUc,GAEpC,MAAA,OACG,OAASA,EAAEE,WAAW,GAAGC,SAAS,KAAKC,OAAO,MAmBzDvB,OAAOiB,KACHyC,KACKxC,QAAQjB,OAAQ,KAChBiB,QAAQhB,SAAU,KAClBgB,QAAQf,QAAS,KAclB,OALRyD,EAAIG,KAAK,IAAML,KAAO,KAKK,mBAAZC,QACTE,KAAK,CAAKD,GAAAA,GAAI,IACdA,EAKJ,MAAA,IAAII,YAAY,gBA9WjC","file":"json2.ac9e6ddd.js","sourceRoot":"../src","sourcesContent":["//  json2.js\n//  2017-06-12\n//  Public Domain.\n//  NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\n//  USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO\n//  NOT CONTROL.\n\n//  This file creates a global JSON object containing two methods: stringify\n//  and parse. This file provides the ES5 JSON capability to ES3 systems.\n//  If a project might run on IE8 or earlier, then this file should be included.\n//  This file does nothing on ES5 systems.\n\n//      JSON.stringify(value, replacer, space)\n//          value       any JavaScript value, usually an object or array.\n//          replacer    an optional parameter that determines how object\n//                      values are stringified for objects. It can be a\n//                      function or an array of strings.\n//          space       an optional parameter that specifies the indentation\n//                      of nested structures. If it is omitted, the text will\n//                      be packed without extra whitespace. If it is a number,\n//                      it will specify the number of spaces to indent at each\n//                      level. If it is a string (such as \"\\t\" or \"&nbsp;\"),\n//                      it contains the characters used to indent at each level.\n//          This method produces a JSON text from a JavaScript value.\n//          When an object value is found, if the object contains a toJSON\n//          method, its toJSON method will be called and the result will be\n//          stringified. A toJSON method does not serialize: it returns the\n//          value represented by the name/value pair that should be serialized,\n//          or undefined if nothing should be serialized. The toJSON method\n//          will be passed the key associated with the value, and this will be\n//          bound to the value.\n\n//          For example, this would serialize Dates as ISO strings.\n\n//              Date.prototype.toJSON = function (key) {\n//                  function f(n) {\n//                      // Format integers to have at least two digits.\n//                      return (n < 10)\n//                          ? \"0\" + n\n//                          : n;\n//                  }\n//                  return this.getUTCFullYear()   + \"-\" +\n//                       f(this.getUTCMonth() + 1) + \"-\" +\n//                       f(this.getUTCDate())      + \"T\" +\n//                       f(this.getUTCHours())     + \":\" +\n//                       f(this.getUTCMinutes())   + \":\" +\n//                       f(this.getUTCSeconds())   + \"Z\";\n//              };\n\n//          You can provide an optional replacer method. It will be passed the\n//          key and value of each member, with this bound to the containing\n//          object. The value that is returned from your method will be\n//          serialized. If your method returns undefined, then the member will\n//          be excluded from the serialization.\n\n//          If the replacer parameter is an array of strings, then it will be\n//          used to select the members to be serialized. It filters the results\n//          such that only members with keys listed in the replacer array are\n//          stringified.\n\n//          Values that do not have JSON representations, such as undefined or\n//          functions, will not be serialized. Such values in objects will be\n//          dropped; in arrays they will be replaced with null. You can use\n//          a replacer function to replace those with JSON values.\n\n//          JSON.stringify(undefined) returns undefined.\n\n//          The optional space parameter produces a stringification of the\n//          value that is filled with line breaks and indentation to make it\n//          easier to read.\n\n//          If the space parameter is a non-empty string, then that string will\n//          be used for indentation. If the space parameter is a number, then\n//          the indentation will be that many spaces.\n\n//          Example:\n\n//          text = JSON.stringify([\"e\", {pluribus: \"unum\"}]);\n//          // text is '[\"e\",{\"pluribus\":\"unum\"}]'\n\n//          text = JSON.stringify([\"e\", {pluribus: \"unum\"}], null, \"\\t\");\n//          // text is '[\\n\\t\"e\",\\n\\t{\\n\\t\\t\"pluribus\": \"unum\"\\n\\t}\\n]'\n\n//          text = JSON.stringify([new Date()], function (key, value) {\n//              return this[key] instanceof Date\n//                  ? \"Date(\" + this[key] + \")\"\n//                  : value;\n//          });\n//          // text is '[\"Date(---current time---)\"]'\n\n//      JSON.parse(text, reviver)\n//          This method parses a JSON text to produce an object or array.\n//          It can throw a SyntaxError exception.\n\n//          The optional reviver parameter is a function that can filter and\n//          transform the results. It receives each of the keys and values,\n//          and its return value is used instead of the original value.\n//          If it returns what it received, then the structure is not modified.\n//          If it returns undefined then the member is deleted.\n\n//          Example:\n\n//          // Parse the text. Values that look like ISO date strings will\n//          // be converted to Date objects.\n\n//          myData = JSON.parse(text, function (key, value) {\n//              var a;\n//              if (typeof value === \"string\") {\n//                  a =\n//   /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);\n//                  if (a) {\n//                      return new Date(Date.UTC(\n//                         +a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]\n//                      ));\n//                  }\n//                  return value;\n//              }\n//          });\n\n//          myData = JSON.parse(\n//              \"[\\\"Date(09/09/2001)\\\"]\",\n//              function (key, value) {\n//                  var d;\n//                  if (\n//                      typeof value === \"string\"\n//                      && value.slice(0, 5) === \"Date(\"\n//                      && value.slice(-1) === \")\"\n//                  ) {\n//                      d = new Date(value.slice(5, -1));\n//                      if (d) {\n//                          return d;\n//                      }\n//                  }\n//                  return value;\n//              }\n//          );\n\n//  This is a reference implementation. You are free to copy, modify, or\n//  redistribute.\n\n/*jslint\n    eval, for, this\n*/\n\n/*property\n    JSON, apply, call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,\n    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,\n    lastIndex, length, parse, prototype, push, replace, slice, stringify,\n    test, toJSON, toString, valueOf\n*/\n\n\n// Create a JSON object only if one does not already exist. We create the\n// methods in a closure to avoid creating global variables.\n\nif (typeof JSON !== \"object\") {\n    JSON = {};\n}\n\n(function () {\n    \"use strict\";\n\n    var rx_one = /^[\\],:{}\\s]*$/;\n    var rx_two = /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;\n    var rx_three = /\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\n    var rx_four = /(?:^|:|,)(?:\\s*\\[)+/g;\n    var rx_escapable = /[\\\\\"\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n    var rx_dangerous = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n\n    function f(n) {\n        // Format integers to have at least two digits.\n        return (n < 10)\n            ? \"0\" + n\n            : n;\n    }\n\n    function this_value() {\n        return this.valueOf();\n    }\n\n    if (typeof Date.prototype.toJSON !== \"function\") {\n\n        Date.prototype.toJSON = function () {\n\n            return isFinite(this.valueOf())\n                ? (\n                    this.getUTCFullYear()\n                    + \"-\"\n                    + f(this.getUTCMonth() + 1)\n                    + \"-\"\n                    + f(this.getUTCDate())\n                    + \"T\"\n                    + f(this.getUTCHours())\n                    + \":\"\n                    + f(this.getUTCMinutes())\n                    + \":\"\n                    + f(this.getUTCSeconds())\n                    + \"Z\"\n                )\n                : null;\n        };\n\n        Boolean.prototype.toJSON = this_value;\n        Number.prototype.toJSON = this_value;\n        String.prototype.toJSON = this_value;\n    }\n\n    var gap;\n    var indent;\n    var meta;\n    var rep;\n\n\n    function quote(string) {\n\n// If the string contains no control characters, no quote characters, and no\n// backslash characters, then we can safely slap some quotes around it.\n// Otherwise we must also replace the offending characters with safe escape\n// sequences.\n\n        rx_escapable.lastIndex = 0;\n        return rx_escapable.test(string)\n            ? \"\\\"\" + string.replace(rx_escapable, function (a) {\n                var c = meta[a];\n                return typeof c === \"string\"\n                    ? c\n                    : \"\\\\u\" + (\"0000\" + a.charCodeAt(0).toString(16)).slice(-4);\n            }) + \"\\\"\"\n            : \"\\\"\" + string + \"\\\"\";\n    }\n\n\n    function str(key, holder) {\n\n// Produce a string from holder[key].\n\n        var i;          // The loop counter.\n        var k;          // The member key.\n        var v;          // The member value.\n        var length;\n        var mind = gap;\n        var partial;\n        var value = holder[key];\n\n// If the value has a toJSON method, call it to obtain a replacement value.\n\n        if (\n            value\n            && typeof value === \"object\"\n            && typeof value.toJSON === \"function\"\n        ) {\n            value = value.toJSON(key);\n        }\n\n// If we were called with a replacer function, then call the replacer to\n// obtain a replacement value.\n\n        if (typeof rep === \"function\") {\n            value = rep.call(holder, key, value);\n        }\n\n// What happens next depends on the value's type.\n\n        switch (typeof value) {\n        case \"string\":\n            return quote(value);\n\n        case \"number\":\n\n// JSON numbers must be finite. Encode non-finite numbers as null.\n\n            return (isFinite(value))\n                ? String(value)\n                : \"null\";\n\n        case \"boolean\":\n        case \"null\":\n\n// If the value is a boolean or null, convert it to a string. Note:\n// typeof null does not produce \"null\". The case is included here in\n// the remote chance that this gets fixed someday.\n\n            return String(value);\n\n// If the type is \"object\", we might be dealing with an object or an array or\n// null.\n\n        case \"object\":\n\n// Due to a specification blunder in ECMAScript, typeof null is \"object\",\n// so watch out for that case.\n\n            if (!value) {\n                return \"null\";\n            }\n\n// Make an array to hold the partial results of stringifying this object value.\n\n            gap += indent;\n            partial = [];\n\n// Is the value an array?\n\n            if (Object.prototype.toString.apply(value) === \"[object Array]\") {\n\n// The value is an array. Stringify every element. Use null as a placeholder\n// for non-JSON values.\n\n                length = value.length;\n                for (i = 0; i < length; i += 1) {\n                    partial[i] = str(i, value) || \"null\";\n                }\n\n// Join all of the elements together, separated with commas, and wrap them in\n// brackets.\n\n                v = partial.length === 0\n                    ? \"[]\"\n                    : gap\n                        ? (\n                            \"[\\n\"\n                            + gap\n                            + partial.join(\",\\n\" + gap)\n                            + \"\\n\"\n                            + mind\n                            + \"]\"\n                        )\n                        : \"[\" + partial.join(\",\") + \"]\";\n                gap = mind;\n                return v;\n            }\n\n// If the replacer is an array, use it to select the members to be stringified.\n\n            if (rep && typeof rep === \"object\") {\n                length = rep.length;\n                for (i = 0; i < length; i += 1) {\n                    if (typeof rep[i] === \"string\") {\n                        k = rep[i];\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (\n                                (gap)\n                                    ? \": \"\n                                    : \":\"\n                            ) + v);\n                        }\n                    }\n                }\n            } else {\n\n// Otherwise, iterate through all of the keys in the object.\n\n                for (k in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (\n                                (gap)\n                                    ? \": \"\n                                    : \":\"\n                            ) + v);\n                        }\n                    }\n                }\n            }\n\n// Join all of the member texts together, separated with commas,\n// and wrap them in braces.\n\n            v = partial.length === 0\n                ? \"{}\"\n                : gap\n                    ? \"{\\n\" + gap + partial.join(\",\\n\" + gap) + \"\\n\" + mind + \"}\"\n                    : \"{\" + partial.join(\",\") + \"}\";\n            gap = mind;\n            return v;\n        }\n    }\n\n// If the JSON object does not yet have a stringify method, give it one.\n\n    if (typeof JSON.stringify !== \"function\") {\n        meta = {    // table of character substitutions\n            \"\\b\": \"\\\\b\",\n            \"\\t\": \"\\\\t\",\n            \"\\n\": \"\\\\n\",\n            \"\\f\": \"\\\\f\",\n            \"\\r\": \"\\\\r\",\n            \"\\\"\": \"\\\\\\\"\",\n            \"\\\\\": \"\\\\\\\\\"\n        };\n        JSON.stringify = function (value, replacer, space) {\n\n// The stringify method takes a value and an optional replacer, and an optional\n// space parameter, and returns a JSON text. The replacer can be a function\n// that can replace values, or an array of strings that will select the keys.\n// A default replacer method can be provided. Use of the space parameter can\n// produce text that is more easily readable.\n\n            var i;\n            gap = \"\";\n            indent = \"\";\n\n// If the space parameter is a number, make an indent string containing that\n// many spaces.\n\n            if (typeof space === \"number\") {\n                for (i = 0; i < space; i += 1) {\n                    indent += \" \";\n                }\n\n// If the space parameter is a string, it will be used as the indent string.\n\n            } else if (typeof space === \"string\") {\n                indent = space;\n            }\n\n// If there is a replacer, it must be a function or an array.\n// Otherwise, throw an error.\n\n            rep = replacer;\n            if (replacer && typeof replacer !== \"function\" && (\n                typeof replacer !== \"object\"\n                || typeof replacer.length !== \"number\"\n            )) {\n                throw new Error(\"JSON.stringify\");\n            }\n\n// Make a fake root object containing our value under the key of \"\".\n// Return the result of stringifying the value.\n\n            return str(\"\", {\"\": value});\n        };\n    }\n\n\n// If the JSON object does not yet have a parse method, give it one.\n\n    if (typeof JSON.parse !== \"function\") {\n        JSON.parse = function (text, reviver) {\n\n// The parse method takes a text and an optional reviver function, and returns\n// a JavaScript value if the text is a valid JSON text.\n\n            var j;\n\n            function walk(holder, key) {\n\n// The walk method is used to recursively walk the resulting structure so\n// that modifications can be made.\n\n                var k;\n                var v;\n                var value = holder[key];\n                if (value && typeof value === \"object\") {\n                    for (k in value) {\n                        if (Object.prototype.hasOwnProperty.call(value, k)) {\n                            v = walk(value, k);\n                            if (v !== undefined) {\n                                value[k] = v;\n                            } else {\n                                delete value[k];\n                            }\n                        }\n                    }\n                }\n                return reviver.call(holder, key, value);\n            }\n\n\n// Parsing happens in four stages. In the first stage, we replace certain\n// Unicode characters with escape sequences. JavaScript handles many characters\n// incorrectly, either silently deleting them, or treating them as line endings.\n\n            text = String(text);\n            rx_dangerous.lastIndex = 0;\n            if (rx_dangerous.test(text)) {\n                text = text.replace(rx_dangerous, function (a) {\n                    return (\n                        \"\\\\u\"\n                        + (\"0000\" + a.charCodeAt(0).toString(16)).slice(-4)\n                    );\n                });\n            }\n\n// In the second stage, we run the text against regular expressions that look\n// for non-JSON patterns. We are especially concerned with \"()\" and \"new\"\n// because they can cause invocation, and \"=\" because it can cause mutation.\n// But just to be safe, we want to reject all unexpected forms.\n\n// We split the second stage into 4 regexp operations in order to work around\n// crippling inefficiencies in IE's and Safari's regexp engines. First we\n// replace the JSON backslash pairs with \"@\" (a non-JSON character). Second, we\n// replace all simple value tokens with \"]\" characters. Third, we delete all\n// open brackets that follow a colon or comma or that begin the text. Finally,\n// we look to see that the remaining characters are only whitespace or \"]\" or\n// \",\" or \":\" or \"{\" or \"}\". If that is so, then the text is safe for eval.\n\n            if (\n                rx_one.test(\n                    text\n                        .replace(rx_two, \"@\")\n                        .replace(rx_three, \"]\")\n                        .replace(rx_four, \"\")\n                )\n            ) {\n\n// In the third stage we use the eval function to compile the text into a\n// JavaScript structure. The \"{\" operator is subject to a syntactic ambiguity\n// in JavaScript: it can begin a block or an object literal. We wrap the text\n// in parens to eliminate the ambiguity.\n\n                j = eval(\"(\" + text + \")\");\n\n// In the optional fourth stage, we recursively walk the new structure, passing\n// each name/value pair to a reviver function for possible transformation.\n\n                return (typeof reviver === \"function\")\n                    ? walk({\"\": j}, \"\")\n                    : j;\n            }\n\n// If the text is not JSON parseable, then a SyntaxError is thrown.\n\n            throw new SyntaxError(\"JSON.parse\");\n        };\n    }\n}());"]}